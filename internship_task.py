# -*- coding: utf-8 -*-
"""Internship_Task.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PlNo7nrrBdPCPnE4CW1eTNHt1KoIVitA

#Importing the Library
"""

import json
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import requests
from pathlib import Path
from typing import Tuple, List, Dict, Any

"""##Creating the Directory"""

data_dir = Path("./data")
current_q1 = data_dir/"current_q1.json"
current_q2 = data_dir/"current_q2.json"
historical_data = data_dir/"hist_data.json"

if data_dir.is_dir():
  print(f"The {data_dir} is already created!!!")
else:
  print(f"Creating the {data_dir} directory....")
  Path.mkdir(data_dir, parents=True, exist_ok=True)
  print(f"Created the {data_dir} directory.")

"""## Importing the Data from the URLS"""

#Importing the data
try:
  response = requests.get("https://www.jsonkeeper.com/b/LLQT")
  response.raise_for_status()

  with open(current_q1, "wb") as q1:
    q1.write(response.content)

except requests.exceptions.RequestException as e:
  print(f"Error occured while processing the data from {https://www.jsonkeeper.com/b/LLQT}: {e}")

try:
  response = requests.get("https://api.jsonserve.com/rJvd7g")
  response.raise_for_status()
  data = response.json()
  # Convert the main-level JSON keys into a DataFrame row
  main_data = {k: v for k, v in data.items() if not isinstance(v, (dict, list))}

  # Flatten the 'quiz' data into additional columns
  quiz_data = data['quiz']
  for key, value in quiz_data.items():
      main_data[f"quiz_{key}"] = value

  # Include 'response_map' as a separate DataFrame (if needed)
  response_map_df = pd.DataFrame(list(data['response_map'].items()), columns=['question_id', 'response_id'])

  # Combine everything into one DataFrame
  df_main = pd.DataFrame([main_data])  # Wrapping it in a list creates a single-row DataFrame

except requests.exceptions.RequestException as e:
  print(f"Error occured while processing the data from {https://api.jsonserve.com/rJvd7g}: {e}")

try:
  response = requests.get("https://api.jsonserve.com/XgAgFJ")
  response.raise_for_status()

  with open(historical_data, "wb") as q3:
    q3.write(response.content)

except requests.exceptions.RequestException as e:
  print(f"Error occured while processing the data from {https://api.jsonserve.com/XgAgFJ}: {e}")

"""##Loading the .json Files into DataFrame

"""

df_1 = pd.read_json(current_q1)
df_3 = pd.read_json(historical_data)

df_1.head()

df_main.head()

response_map_df

df_3.head()

# Load data
def load_json(file_path:Path):
  """
  This function loads and reads the json file by taking in the path of the json file.
  """
  with open(file_path, "r") as f:
      return json.load(f)

data_q1 = load_json(file_path=current_q1)
hist_data = load_json(file_path=historical_data)

"""##Building function to analyze the json data and function to generate recommendations"""

# Analysis Function
def analyze_data(current_data:Dict[str,Any], historical_data:Dict[str,Any])->Dict[str,Any]:
  """
  This funtions takes in the loaded json files and analysize it according to the taks assigned.
  """
  # Extract quiz-level data
  quiz = current_data.get("quiz", {})
  total_questions = quiz.get("questions_count", 0)
  title = quiz.get("title", "Unknown Quiz")
  topic = quiz.get("topic", "Unknown Topic")

  # Analyze questions
  questions = quiz.get("questions", [])
  correct_answers = sum(1 for q in questions if any(opt["is_correct"] for opt in q.get("options", [])))
  accuracy = (correct_answers / total_questions) * 100 if total_questions > 0 else 0

  # Historical analysis
  historical_scores = [quiz["score"] for quiz in historical_data]
  improvement_trend = historical_scores[-1] - historical_scores[0] if len(historical_scores) > 1 else 0

  # Identify weak topics (if topics exist in historical data)
  historical_topics = [quiz["quiz"]["topic"] for quiz in historical_data if "quiz" in quiz]
  topic_performance = pd.Series(historical_topics).value_counts()

  # Insights
  insights = {
      "quiz_title": title,
      "quiz_topic": topic,
      "accuracy": accuracy,
      "improvement_trend": improvement_trend,
      "weak_topics": topic_performance.index[-3:] if not topic_performance.empty else [],
  }
  return insights

# Recommendations
def generate_recommendations(insights:Dict)->List:
  """
  This Function Generates a List of recommendations to focus on the weak topics and tell other details.
  """
  recommendations = []

  # Weak Topics
  weak_topics = insights['weak_topics']
  if not weak_topics.empty:  # Check if weak_topics is not empty
      weak_topics_list = weak_topics.tolist()  # Convert to a list
      weak_topics_str = ', '.join(weak_topics_list)
      recommendations.append(f"Focus on these weak topics: {weak_topics_str}.")
  else:
      recommendations.append("Great work! No weak topics identified from historical data.")

  # Accuracy
  recommendations.append(f"Your accuracy is {insights['accuracy']}%. Keep practicing to maintain or improve this level.")

  # Improvement Trend
  if insights['improvement_trend'] < 0:
      recommendations.append(
          f"Your improvement trend is {insights['improvement_trend']}. Consider revisiting earlier topics and addressing gaps."
      )
  else:
      recommendations.append(
          f"Your improvement trend is {insights['improvement_trend']}. Great work! Keep up the consistent progress."
      )

  return recommendations

insights = analyze_data(current_data=data_q1, historical_data=hist_data)
recommendation = generate_recommendations(insights=insights)

df_1.columns

insights.keys()

insights

recommendation

recommendation

def visualize_performance(historical_data):
    historical_scores = [quiz["score"] for quiz in historical_data]
    plt.plot(historical_scores, marker='o')
    plt.title("Performance Trend")
    plt.xlabel("Quiz Index")
    plt.ylabel("Score")
    plt.show()

def define_student_persona(accuracy, improvement_trend):
    if accuracy > 80 and improvement_trend > 10:
        return "High Achiever"
    elif accuracy < 50 and improvement_trend < 5:
        return "Needs Improvement"
    elif improvement_trend > 10:
        return "Rapid Improver"
    else:
        return "Steady Performer"

visualize_performance(historical_data=hist_data)

define_student_persona(accuracy=insights["accuracy"],improvement_trend=insights["improvement_trend"])

